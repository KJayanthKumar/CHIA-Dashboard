@model CHIADashboardApplication.Models.ChiaDetails
@using GridMvc.Html
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<html>
<head>
    <link href="~/Content/Gridmvc.css" rel="stylesheet" />
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <script src="~/Scripts/gridmvc.min.js"></script>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/spin.min.js"></script>

    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
    <link rel="stylesheet" href="/resources/demos/style.css">

    <link href="http://cdn.rawgit.com/davidstutz/bootstrap-multiselect/master/dist/css/bootstrap-multiselect.css" rel="stylesheet" type="text/css" />
    <script src="http://cdn.rawgit.com/davidstutz/bootstrap-multiselect/master/dist/js/bootstrap-multiselect.js" type="text/javascript"></script>
    <script type="text/javascript">
        var j = jQuery.noConflict();
        j(function () {
            j('#SelCountry').multiselect({
                includeSelectAllOption: true
            });
        });
    </script>
    <style type="text/css">
        #loading {
            display: none;
            position: fixed;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(255,255,255,0.8);
            z-index: 1000;
        }

        #loadingcontent {
            display: table;
            position: fixed;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
        }

        #loadingspinner {
            display: table-cell;
            vertical-align: middle;
            width: 100%;
            text-align: center;
            font-size: larger;
            padding-top: 80px;
        }

        .cssClassRed {
            background-color: red;
        }

        .rowcolor {
            color: red;
        }

        .Login {
            padding-left: 10em
        }

        .Submit {
            margin-left: 3em
        }
    </style>
    <script type="text/javascript">
        var k = jQuery.noConflict();
        k(document).ready(function () {
            k("#FromDate").datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                maxDate: '0',
                onClose: function (selectedDate) {
                    // Set the minDate of 'to' as the selectedDate of 'from'
                    k("#ToDate").datepicker("option", "minDate", selectedDate)
                }
            }).attr('readonly', 'readonly') //To make textbox readonly
        });

        k(document).ready(function () {
            k("#ToDate").datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                maxDate: '0'
            }).attr('readonly', 'readonly')
        });
    </script>
    <script type="text/javascript">
        var l = jQuery.noConflict();
        l(function () {
            l("#submitbtn").click(function () {
            l("#loading").fadeIn();
            });
        });
    </script>
    <script type="text/javascript">
        var m = jQuery.noConflict();
        m(function () {
            m("#submitbtn").click(function () {
                m("#loading").fadeIn();
                var opts = {
                    lines: 12, // The number of lines to draw
                    length: 7, // The length of each line
                    width: 4, // The line thickness
                    radius: 10, // The radius of the inner circle
                    color: '#000', // #rgb or #rrggbb
                    speed: 1, // Rounds per second
                    trail: 60, // Afterglow percentage
                    shadow: false, // Whether to render a shadow
                    hwaccel: false // Whether to use hardware acceleration
                };
                var target = document.getElementById('loading');
                var spinner = new Spinner(opts).spin(target);
            });
        });
    </script>
    <script type="text/javascript">
        var n = jQuery.noConflict();
        function save(key)
        {
            var comment = n("#" + key +"textArea").val();
            document.getElementById(key + 'textArea').disabled = true;
            n.ajax({
                        url: "@Url.Action("SaveComments")",
                        type: "post",
                        data: { key: key,comment: comment },
                        success: function (data) { }
                    });
        }
    </script>
    <script type="text/javascript">
        function edit(key) {
            document.getElementById(key + 'textArea').disabled = false;
        }
    </script>
</head>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
    <div class="form-inline" style="width:1138px;height:70px; border:0.2px solid black; margin-top:5px;">
        <br>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.Label("Select Date", htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.LabelFor(model => model.FromDate, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-3 col-lg-pull-1">
                @Html.TextBoxFor(model => model.FromDate, new { size = "10", @Value = ViewBag.From, autocomplete = "off", htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ToDate, htmlAttributes: new { @style = "width: 90px;", @class = "control-label col-md-4 col-lg-offset-1" })
            <div class="col-md-3 col-lg-pull-1">
                @Html.TextBoxFor(model => model.ToDate, new { size = "10", @Value = ViewBag.To, autocomplete = "off", htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ToDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b>
        @Html.Label("Originating Team")
        <b>&nbsp;&nbsp;&nbsp;&nbsp;</b>
        @Html.DropDownListFor(m => m.SelCountry, new SelectList(ViewBag.CountryList, "Value", "Text",1), new { @multiple = "multiple" })
        <b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b>
        <input type="Submit" value="Submit" formaction="Submit" id="submitbtn" class="btn btn-success btn-md" />
        <br><br>
    </div>
    }
    <div id="loading">
        <div id="loadingcontent">
            <p id="loadingspinner">
                Fetching data...
            </p>
        </div>
    </div>
    <div>
        @if (Model != null)
        {
            @Html.Grid(Model.issueInfo).SetRowCssClasses(c => c.age > 150 ? "rowcolor" : "").Columns(columns =>
            {
                columns.Add(c => c.CHIA_Id).Titled("CHIA-ID").Sanitized(false).Encoded(false).
                RenderValueAs(c => ("<a href='https://jira3.cerner.com/browse/" + c.key + "'target='_blank'>" + c.CHIA_Id + "</a>"));
                columns.Add(c => c.createdDate).Titled("CreatedDate");
                columns.Add(c => c.compliance_Analyst).Titled("Compliance Analyst");
                columns.Add(c => c.age).Titled("Age(days)");
                columns.Add(c => c.status).Titled("Status").Sortable(true).SortInitialDirection(GridMvc.Sorting.GridSortDirection.Descending).ThenSortBy(c => c.createdDate);
                columns.Add(c => c.CHIA_CR).Titled("CHIA-CR").Sanitized(false).Encoded(false).
                RenderValueAs(c => ("<a href='" + c.CR_url + "'target='_blank'>" + c.CHIA_CR + "</a>"));
                columns.Add(c => c.comment).Titled("Comment").Encoded(false).Sanitized(false)
                .RenderValueAs(c => @<b>
                        @Html.TextArea(c.key + "textBox", c.comment, new { ID = c.key + "textArea", @cols = 20, @rows = 1, @disabled = "disabled" })
                <input type="image" src="~/Resources/edit_img.jpg" title="Edit" id="Edit" width="19" onclick="edit('@c.key')" />
                <input type="image" src="~/Resources/save_img.png" title="Save" id="Save" width="24" onclick="save('@c.key')" /></b>);
            }).WithPaging(10)
        }
    </div>
    <div>
        <p><font size="3" face="verdana">@TempData["ErrorMessage"]</font></p>
    </div>
</body>
</html>